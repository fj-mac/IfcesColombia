{"version":3,"sources":["buscar.js","App.js","serviceWorker.js","index.js"],"names":["buscar","props","state","ApiBuscada","top","bottom","loading","encontrados","handleSubmit","bind","handleAPIChange","event","valor","target","value","this","setState","Estrato","console","log","preventDefault","url","fetch","then","response","json","datos","catch","error","className","id","type","onChange","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0OA0EeA,G,kBAtEd,WAAYC,GAAO,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACXC,WAAY,GACZC,IAAK,GACLC,OAAQ,GACRC,SAAQ,EACRC,aAAa,GAEb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBAVV,E,6EAaDE,GAAQ,IAAD,OACjBC,EAAMD,EAAME,OAAOC,MACvBC,KAAKC,SAAS,CAAEC,QAASL,IAAS,WAChCM,QAAQC,IAAI,8BAA+B,EAAKjB,MAAMe,c,mCAS7CN,GACVA,EAAMS,iBACN,IAAIC,EAAIN,KAAKb,MAAMC,WAAW,GAC9Be,QAAQC,IAAI,cAAeE,GAC5BN,KAAKC,SAAS,CAACV,SAAQ,IACtBgB,MAAMD,GACJE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACF,IAAIE,EAAMF,EACVN,QAAQC,IAAIO,MAEfC,OAAM,SAAAC,GAAK,OAAEV,QAAQC,IAAI,oBAAqBS,Q,+BAMnD,OACE,6BACE,4DACA,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,2BAAOC,GAAG,QAAQC,KAAK,OAAOF,UAAU,eACvCG,SAAUjB,KAAKL,mBAIlB,yBAAKmB,UAAU,YACb,4BAAQE,KAAK,SAASF,UAAU,oBAChCI,QAASlB,KAAKP,cADd,YAKJ,yBAAKqB,UAAU,OACf,yBAAKA,UAAU,aAEf,yBAAKA,UAAU,YACbd,KAAKb,MAAMI,SAA+B,MAAnBS,KAAKb,MAAMG,OAAe,yBAAKwB,UAAU,WAAgB,qC,GA/DnEK,cC0BNC,E,YAzBd,WAAYlC,GAAO,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACXe,QAAS,GACTb,IAAK,GACLC,OAAQ,GACRC,SAAQ,GANK,E,sEAcjB,OACE,6BACE,kBAAC,EAAD,W,GAjBY4B,aCSEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,yBAAKb,UAAU,aACb,kBAAC,EAAD,OAGDc,SAASC,eAAe,SDsHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.0fe8da38.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./buscar.css\"\n\nclass buscar extends Component  {\n constructor(props){\n    super(props);\n    this.state = {\n      ApiBuscada: \"\",\n      top: [],\n      bottom: [],\n      loading:false,\n      encontrados: false\n    }\n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.handleAPIChange = this.handleAPIChange.bind(this);\n  }\n\n  handleAPIChange(event) {\n    let valor=event.target.value;\n    this.setState({ Estrato: valor }, ()=>{\n      console.log(\"Se ha seleccionado el api: \"+ this.state.Estrato)\n    }\n\n    );\n  }\n\n\n\n\n  handleSubmit(event) {\n     event.preventDefault();\n     let url=this.state.ApiBuscada+\"\";\n     console.log(\"la url es: \"+ url)\n    this.setState({loading:true})\n     fetch(url)\n      .then(response => response.json())\n      .then(response => {\n          let datos=response;\n          console.log(datos);\n      })\n      .catch(error=>console.log(\"No sirve el fetch\", error))\n  }\n\n\nrender(){\n\n  return (\n    <div>\n      <h1>React funcionando front+back</h1>\n      <div className=\"row\">\n        <div className=\"col-md-10\">\n          <input id=\"input\" type=\"text\" className=\"form-control\"\n           onChange={this.handleAPIChange}\n\n          />\n        </div>\n        <div className=\"col-md-2\">\n          <button type=\"button\" className=\"btn btn-secondary\"\n          onClick={this.handleSubmit}\n          >Buscar</button>\n        </div>\n      </div>\n      <div className=\"row\">\n      <div className=\"col-md-5\">\n      </div>\n      <div className=\"col-md-2\">\n       {this.state.loading || (this.state.bottom==null)? <div className=\"loader\"></div>:<div></div>}\n      </div>\n      </div>\n    </div>\n  )\n}\n}\n\nexport default buscar;\n","import React, { Component } from \"react\";\nimport Buscar from \"./buscar\";\n\nclass App extends Component  {\n constructor(props){\n    super(props);\n    this.state = {\n      Estrato: \"\",\n      top: [],\n      bottom: [],\n      loading:false\n    }\n  }\n\n\n\n\nrender(){\n  return (\n    <div>\n      <Buscar/>\n\n    </div>\n  )\n}\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <div className=\"container\">\n    <App />\n  </div>\n\n  ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}