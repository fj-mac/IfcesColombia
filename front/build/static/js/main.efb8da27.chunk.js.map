{"version":3,"sources":["Navioo.js","buscar.js","App.js","serviceWorker.js","index.js"],"names":["Navioo","props","state","datos","altura","tamano","this","update","nv","navio","myDiv","data","addAllAttribs","ref","Component","buscar","ApiBuscada","datosAPI","loading","termino","historial","handleSubmit","bind","handleAPIChange","event","setState","valor","target","value","console","log","a","b","push","preventDefault","url","historialtempo","concatenar","fetch","then","response","json","catch","error","className","id","type","onChange","onClick","App","Estrato","top","bottom","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.efb8da27.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport navio from \"navio\";\r\n\r\nclass Navioo extends Component  {\r\n constructor(props){\r\n    super(props);\r\n    this.state = {\r\n\r\n      datos:props.datos,\r\n      altura:props.tamano\r\n\r\n    }\r\n  }\r\n\r\ncomponentDidMount()\r\n{\r\n  this.update();\r\n}\r\ncomponentDidUpdate()\r\n{\r\n  this.update();\r\n}\r\n\r\nupdate(){\r\n  let nv = new navio(this.myDiv, this.state.altura);\r\n  nv.data(this.state.datos);\r\n  nv.addAllAttribs();\r\n}\r\n\r\n\r\nrender(){\r\n\r\n  return (\r\n      <div ref={myDiv=>this.myDiv=myDiv}> </div>\r\n  )\r\n}\r\n}\r\n\r\nexport default Navioo;\r\n","import React, { Component } from \"react\";\nimport \"./buscar.css\";\nimport Navioo from \"./Navioo.js\";\n\nclass buscar extends Component  {\n constructor(props){\n    super(props);\n    this.state = {\n      ApiBuscada: \"\",\n      datosAPI: [],\n      loading:false,\n      termino:false,\n      tamano:800,\n      historial:[]\n\n    }\n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.handleAPIChange = this.handleAPIChange.bind(this);\n  }\n\n  handleAPIChange(event) {\n    this.setState({termino:false})\n    let valor=event.target.value;\n    this.setState({ ApiBuscada: valor }, ()=>{\n      console.log(\"Se ha seleccionado el api: \"+ valor)\n    }\n    );\n  }\n  concatenar(a,b){\n    a=a.push(b);\n  };\n\n  handleSubmit(event) {\n    this.setState({loading:true})\n    this.setState({termino:false});\n    event.preventDefault();\n    let url=this.state.ApiBuscada;\n    let historialtempo=this.state.historial;\n    historialtempo=this.concatenar(historialtempo,url);\n    this.setState({historial:historialtempo});\n    console.log(\"Hasta el momento el historial es: \"+this.state.historial);\n    this.setState({termino:false});\n     this.setState({loading:true})\n     fetch(url+\"?$limit=9999&$offset=0\")\n      .then(response => response.json())\n      .then(response => {\n          let datos=response;\n          this.setState({ datosAPI: datos });\n          this.setState({loading:false});\n          this.setState({termino:true});\n      })\n      .catch(error=>console.log(\"No sirve el fetch\", error))\n  }\n\n\nrender(){\n\n  return (\n    <div>\n      <h1>Datos.gov.co Visualizacion</h1>\n      <div className=\"row\">\n      <h1>Ingrese el api a consultar: </h1>\n        <div className=\"col-md-10\">\n\n          <input id=\"input\" type=\"text\" className=\"form-control\"\n           onChange={this.handleAPIChange}\n\n          />\n        </div>\n        <div className=\"col-md-2\">\n          <button type=\"button\" className=\"btn btn-secondary\" value={this.state.ApiBuscada}\n          onClick={this.handleSubmit}\n          >Buscar</button>\n        </div>\n      </div>\n      <div className=\"row\">\n      <div className=\"col-md-5\">\n      </div>\n      <div className=\"col-md-2\">\n       {this.state.loading? <div className=\"loader\"></div>:<div></div>}\n      </div>\n        {this.state.termino? <h1>Sus resultados se evidencian a continuacion</h1>:<div></div>}\n        {this.state.termino? <div><Navioo datos={this.state.datosAPI} altura={this.state.tamano}/></div>:<div></div>}\n\n      </div>\n    </div>\n  )\n}\n}\n\nexport default buscar;\n","import React, { Component } from \"react\";\nimport Buscar from \"./buscar\";\n\nclass App extends Component  {\n constructor(props){\n    super(props);\n    this.state = {\n      Estrato: \"\",\n      top: [],\n      bottom: [],\n      loading:false\n    }\n  }\n\n\n\n\nrender(){\n  return (\n    <div>\n      <Buscar/>\n    </div>\n  )\n}\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <div className=\"container\">\n    <App />\n  </div>\n\n  ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}